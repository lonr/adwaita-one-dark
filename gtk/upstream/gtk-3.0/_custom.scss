// Custom added styles

$linked_border: if($variant == 'light', darken($borders_color, 6.7%), lighten($borders_color, 5%));
$linked_border_checked: if($variant == 'light', darken($linked_border, 17.7%), lighten($linked_border, 14.7%));
$backdrop_linked_border: if($variant == 'light', $backdrop_borders_color, darken($backdrop_borders_color, 5%));

// Trying to mimic the headerbar button colors from the libadwaita theme when used in gtk4-widget-factory
%colored_buttons {
  @if $variant == 'light' { @include button(normal, lighten($headerbar_color, 1%), $fg_color); }
  @else { @include button(normal, darken($headerbar_color, 0.3%), $fg_color); }
  &:backdrop {
    @include button(backdrop, $bg_color, $backdrop_fg_color);
  }
  &:hover {
    @if $variant == 'light' { @include button(hover, lighten($headerbar_color, 0.3%), $fg_color); }
    @else { @include button(hover, darken($headerbar_color, 0.7%), $fg_color); }
    &:backdrop {
      @if $variant == 'light' { @include button(backdrop, darken($bg_color, 2.7%), $backdrop_fg_color); }
      @else { @include button(backdrop, lighten($bg_color, 2.7%), $backdrop_fg_color); }
    }
  }
  &:active, &:checked {
    @if $variant == 'light' { @include button(active, lighten($headerbar_color, 1.7%), $fg_color); }
    @else { @include button(active, darken($headerbar_color, 1%), $fg_color); }
    &:backdrop {
      @include button(normal, $bg_color, $backdrop_fg_color); //FIXME
    }
  }
  &:disabled {
    @include button(insensitive, $headerbar_color, $insensitive_fg_color);
  }
  &:backdrop:disabled {
    @include button(backdrop-insensitive, $bg_color, $backdrop_insensitive_color);
  }

  &.default:not(:backdrop):not(.suggested-action):not(.destructive-action) {
    @include button(normal, $headerbar_color, $fg_color);
  }

  &.flat:not(:hover):not(:active) { @include button(undecorated); }

  &.suggested-action, &.text-button.suggested-action { @extend %suggested_buttons; }
  &.destructive-action, &.text-button.destructive-action { @extend %destructive_buttons; }
}

%headerbar_buttons {
  // The normal state is set where it's needed. Usually undecorated.
  &:hover {
    @if $variant == 'light' { @include button(hover, lighten($headerbar_color, 6.3%), $fg_color); }
    @else { @include button(hover, darken($headerbar_color, 7.7%), $fg_color); }
  }

  &:backdrop:hover {
    @if $variant == 'light' { @include button(backdrop, lighten($bg_color, 1.3%), $backdrop_fg_color); }
    @else { @include button(backdrop, darken($bg_color, 1.3%), $backdrop_fg_color); }
  }

  &:active, &:checked {
    @if $variant == 'light' { @include button(normal, lighten($headerbar_color, 1%), $fg_color); }
    @else { @include button(normal, darken($headerbar_color, 0.3%), $fg_color); }
    &:backdrop {
      @include button(normal, $bg_color, $backdrop_fg_color); //FIXME
    }
  }

  &:active:hover, &:checked:hover {
    @if $variant == 'light' { @include button(normal, darken($headerbar_color, 1.3%), $fg_color); }
    @else { @include button(normal, lighten($headerbar_color, 2.3%), $fg_color); }
    &:backdrop {
      @include button(normal, $bg_color, $backdrop_fg_color); //FIXME
    }
  }

  &.default:not(:backdrop):not(.suggested-action):not(.destructive-action) {
    @include button(normal, $headerbar_color, $fg_color);
  }

  &.flat:not(:hover):not(:active) { @include button(undecorated); }

  &.suggested-action, &.text-button.suggested-action { @extend %suggested_buttons; }
  &.destructive-action, &.text-button.destructive-action { @extend %destructive_buttons; }
}

%suggested_buttons {
  @include button(normal, $suggested_bg_color, white);
  &:hover { @include button(hover, $suggested_bg_color, white); }
  &:active, &:checked { @include button(active, transparentize($suggested_bg_color, 0.5), white); }
  &:backdrop, &:backdrop:hover { @include button(backdrop, transparentize($suggested_bg_color, 0.5), white); }
  &:disabled { @include button(insensitive, $headerbar_color, $fg_color); }
  &:backdrop:disabled { @include button(backdrop-insensitive, $bg_color, $backdrop_insensitive_color); }
}

%destructive_buttons {
  @include button(normal, $destructive_color, white);
  &:hover { @include button(normal, $destructive_color, white); }
  &:active, &:checked { @include button(active, transparentize($destructive_color, 0.5), white); }
  &:backdrop, &:backdrop:hover { @include button(backdrop, transparentize($destructive_color, 0.5), white); }
  &:disabled { @include button(insensitive, $headerbar_color, $fg_color); }
  &:backdrop:disabled { @include button(backdrop-insensitive, $bg_color, $backdrop_insensitive_color); }
}

// headerbar stuff
headerbar, .titlebar {
  button:not(.titlebutton) {
    &, &:backdrop { @include button(undecorated); }
    @extend %headerbar_buttons;
  }

  // Text buttons
  button.text-button:not(.suggested-action):not(.destructive-action):not(:disabled) {
    @extend %colored_buttons;
  }

  // Linked button borders
  .linked.raised button:not(:only-child),
  .linked button:not(:only-child),
  & > .stack-switcher.linked > button:not(:only-child) {
    @extend %linked;
    &, &:hover, &:not(:backdrop), &:not(:disabled) {
      &:not(:first-child) { border-left-color: $linked_border; }
      &:not(:last-child) { border-right-color: $linked_border; }
    }
    &:active, &:checked {
      &:not(:first-child) { border-left-color: $linked_border_checked; }
      &:not(:last-child) { border-right-color: $linked_border_checked; }
    }
    &:backdrop {
      &:not(:first-child) { border-left-color: $backdrop_linked_border; }
      &:not(:last-child) { border-right-color: $backdrop_linked_border; }
    }
    &:first-child { border-left-color: transparent; }
    &:last-child { border-right-color: transparent; }

    // Trick to get a linked right border on checked buttons, and no left border on the next button
    &:first-child:not(:backdrop),
    &:not(:last-child):not(:backdrop) {
      &:checked, &:active {
        box-shadow: inset -1px 0 $linked_border_checked;
        + button { border-left-color: transparent; }
      }
    }
  }

  // Linked color fills
  // In libadwaita the linked buttons appear on hover, so it would be better to have ".linked:hover button" instead, but sadly it is not possible.
  .linked.raised button,
  .linked button:not(:only-child),
  & > .stack-switcher.linked > button { @extend %colored_buttons; }

  // hdy viewswitcher buttons (weather, system monitor, etc.)
  viewswitcher button.radio:checked {
    @extend %headerbar_buttons;
  }

  // Selection mode
  &.selection-mode {
    button,
    button.text-button:not(.suggested-action):not(.destructive-action):not(:disabled) { @extend %suggested_buttons; }
  }

  // Entries
  entry {
    min-height: 32px; // Evens out the height for the top and bottom borders which adds 2px
    @include button(normal, $headerbar_color, $text_color);
    &:backdrop { @include button(backdrop, $bg_color, $backdrop_text_color); }
    &:disabled { @include button(insensitive, $headerbar_color, $insensitive_fg_color); }
    &:disabled:backdrop { @include button(insensitive, $bg_color, $backdrop_insensitive_color); }

    image { // icons inside the entry
      &.left { margin-right: 6px; }
      &.right { margin-left: 6px; }

      // entry icons colors
      color: mix($fg_color, $base_color, 80%);
      &:hover { color: $fg_color; }
      &:active { color: $selected_bg_color; }
      &:backdrop { color: mix($backdrop_fg_color, $backdrop_base_color, 80%); }
    }

    selection { @extend %selected_items; }

    // entry error and warning style
    @each $e_type, $e_color in (error, $error_color),
                               (warning, $warning_color) {
      &.#{$e_type} {
        color: $e_color;
        border-color: entry_focus_border($e_color);

        &:focus { @include entry(focus, $e_color); }

        selection { background-color: $e_color; }
      }
    }

    &.flat {
      &:focus, &:backdrop, &:disabled, &:backdrop:disabled, & {
        min-height: 0;
        padding: 2px;
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }
    }

    &:drop(active) {
      &:focus, & {
        border-color: $drop_target_color;
        box-shadow: inset 0 0 0 1px $drop_target_color;
      }
    }

    progress {
      margin: 2px -6px;
      background-color: transparent;
      background-image: none;
      border-radius: 0;
      border-width: 0 0 2px;
      border-color: $progress_bg_color;
      border-style: solid;
      box-shadow: none;

      &:backdrop { background-color: transparent; }
    }
  }

  .linked entry:not(:first-child) {
    border-left-color: $linked_border;
    &:backdrop { border-left-color: $backdrop_linked_border; }
  }
  .linked entry ~ .image-button { @extend %colored_buttons; }

  // disabled switches
  switch:disabled {
    background-color: darken($backdrop_dark_fill, 4%);
    &:backdrop { background-color: $backdrop_dark_fill; }
  }

  // better animation when switching from backdrop
  &:not(:backdrop) { transition: 200ms ease-in; }

  // Balance out the titlebutton margin
  .right {
    margin-left: -4px;
    separator { min-width: 0; }
  }
  .left {
    margin-right: -4px;
    separator { min-width: 0; }
  }
}

// Different button color on brighter elements like lists and popovers
.content list,
list.content,
list.view.frame {
  button, > row:not(:selected):hover button {
    @include button(normal, $card_bg_color, $card_fg_color);
    &.flat:not(:hover):not(:active) { @include button(undecorated); }
    &:hover { @include button(hover, $card_bg_color, $card_fg_color); }
    &:active, &:checked { @include button(active, $card_bg_color, $card_fg_color); }
    &:disabled { @include button(insensitive, $card_bg_color, $insensitive_fg_color); }
    &:backdrop { @include button(backdrop, $card_bg_color, $backdrop_fg_color); }
    &:backdrop:disabled { @include button(backdrop-insensitive, $card_bg_color, $backdrop_fg_color); }

    &.suggested-action { @extend %suggested_buttons; }
    &.destructive-action { @extend %destructive_buttons; }
  }
  entry {
    @include button(normal, $card_bg_color, $text_color);
    &:disabled { @include button(insensitive, $card_bg_color, $insensitive_fg_color); }
    &:backdrop { @include button(backdrop, $card_bg_color, $backdrop_text_color); }
    &:backdrop:disabled { @include button(backdrop-insensitive, $card_bg_color, $backdrop_fg_color); }
  }
}

popover.background {
  button {
    @include button(normal, $popover_bg_color, $fg_color);
    &.flat:not(:hover):not(:active) { @include button(undecorated); }
    &:hover { @include button(hover, $popover_bg_color, $fg_color); }
    &:active, &:checked { @include button(active, $popover_bg_color, $fg_color); }
    &:disabled { @include button(insensitive, $popover_bg_color, $insensitive_fg_color); }
    &:backdrop { @include button(backdrop, $popover_bg_color, $backdrop_fg_color); }
    &:backdrop:disabled { @include button(backdrop-insensitive, $popover_bg_color, $backdrop_fg_color); }

    &.suggested-action { @extend %suggested_buttons; }
    &.destructive-action { @extend %destructive_buttons; }
  }
  entry {
    @include button(normal, $popover_bg_color, $text_color);
    &:disabled { @include button(insensitive, $popover_bg_color, $insensitive_fg_color); }
    &:backdrop { @include button(backdrop, $popover_bg_color, $backdrop_text_color); }
    &:backdrop:disabled { @include button(backdrop-insensitive, $popover_bg_color, $backdrop_fg_color); }
  }
}

// Even out toggle button padding to make them more square
button.toggle:not(.image-button) {
  padding-left: 8px;
  padding-right: 8px;
}

// Font fixes when button text is bold
.flat.popup:not(.title) {
  font-weight: normal;
}

// Smaller text in statusbars
statusbar {
  font-size: small;
}

// scrolled window list rows
scrolledwindow list {
  &:not(.content) {
    padding: 6px 0;
  }
  row {
    margin: 0 6px;
    border-radius: $button_radius;
  }
  separator.horizontal {
    margin: 6px;
  }
}

// Fix wrong border-radius on hdy spinbutton entries
list.content .horizontal spinbutton entry {
  border-top-left-radius: $button_radius;
  border-bottom-left-radius: $button_radius;
}

// Non "content" lists
list.view.frame {
  border-radius: $card_radius;
  &, &:backdrop { background-color: $card_bg_color; }
}

// Legacy application titlebuttons
.ssd .titlebar {
  border-width: 0;
  padding: 0px 4px;
  min-height: 36px;
  border-bottom: 1px solid $borders_color;
  &:backdrop { border-color: $backdrop_borders_color; }

  &.default-decoration button.titlebutton {
    background-color: $titlebutton_normal;
    min-height: 24px;
    min-width: 24px;
    margin: 0 4px 0 4px;
    padding: 0;
    &:hover { background-color: $titlebutton_normal_hover; }
    &:hover:active, &:active { background-color: $titlebutton_normal_active; }
    &:backdrop { background: $titlebutton_backdrop; }
    &:backdrop:hover { background: $titlebutton_backdrop_hover; }
  }
}

// Tree views
treeview.view:not(:backdrop):not(:selected):hover {
  background-color: $view_hover_color;
}

// Preferences window
// In nautilus preferences there is no padding below the last list
.preferences scrolledwindow > .frame > clamp {
  &.large, &.medium, &.small { padding-bottom: 30px; }
}

// Linked osd buttons, like in totem
.osd .linked > button { border-color: transparent; }

// Toolbars
.primary-toolbar, .toolbar {
  background-color: $bg_color;
  &:backdrop { background-color: $backdrop_bg_color; }
}

// Popover menuitems
popover.background {
  modelbutton.flat {
    padding-left: 16px;
    padding-right: 16px;
  }
}
